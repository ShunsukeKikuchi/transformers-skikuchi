#                ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨
#           This file was automatically generated from src/transformers/models/encdecgemma2/modular_encdecgemma2.py.
#               Do NOT edit this file manually as any edits will be overwritten by the generation of
#             the file from the modular. If any change should be done, please apply the change to the
#                          modular_encdecgemma2.py file directly. One of our CI enforces this.
#                ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨
# coding=utf-8
# Copyright 2024 Google Inc. HuggingFace Inc. team. All rights reserved.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
from typing import Optional

from ...configuration_utils import PretrainedConfig


class EncdecGemma2StackConfig(PretrainedConfig):
    r"""
        This is the configuration class to store the configuration of a [`EncdecGemma2StackModel`]. It is used to instantiate an EncdecGemma2Stack
        model according to the specified arguments, defining the model architecture. Instantiating a configuration with the
        defaults will yield a similar configuration to that of the EncdecGemma2Stack-7B.
        e.g. [google/encdec_gemma2_stack-7b](https://huggingface.co/google/encdec_gemma2_stack-7b)
        Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the
        documentation from [`PretrainedConfig`] for more information.
        Args:
            vocab_size (`int`, *optional*, defaults to 256000):
                Vocabulary size of the EncdecGemma2Stack model. Defines the number of different tokens that can be represented by the
                `inputs_ids` passed when calling [`EncdecGemma2StackModel`]
            hidden_size (`int`, *optional*, defaults to 2304):
                Dimension of the hidden representations.
            intermediate_size (`int`, *optional*, defaults to 9216):
                Dimension of the MLP representations.
            num_hidden_layers (`int`, *optional*, defaults to 26):
                Number of hidden layers in the Transformer decoder.
            num_attention_heads (`int`, *optional*, defaults to 8):
                Number of attention heads for each attention layer in the Transformer decoder.
            num_key_value_heads (`int`, *optional*, defaults to 4):
                This is the number of key_value heads that should be used to implement Grouped Query Attention. If
                `num_key_value_heads=num_attention_heads`, the model will use Multi Head Attention (MHA), if
                `num_key_value_heads=1` the model will use Multi Query Attention (MQA) otherwise GQA is used. When
                converting a multi-head checkpoint to a GQA checkpoint, each group key and value head should be constructed
                by meanpooling all the original heads within that group. For more details checkout [this
                paper](https://arxiv.org/pdf/2305.13245.pdf). If it is not specified, will default to
                `num_attention_heads`.
            head_dim (`int`, *optional*, defaults to 256):
                The attention head dimension.
            hidden_activation (`str` or `function`, *optional*, defaults to `"gelu_pytorch_tanh"`):
                The non-linear activation function (function or string) in the decoder. Will default to `"gelu_pytorch_tanh"`
                if not specified. `"gelu_pytorch_tanh"` uses an approximation of the `"gelu"` activation function.
            max_position_embeddings (`int`, *optional*, defaults to 8192):
                The maximum sequence length that this model might ever be used with.
            initializer_range (`float`, *optional*, defaults to 0.02):
                The standard deviation of the truncated_normal_initializer for initializing all weight matrices.
            rms_norm_eps (`float`, *optional*, defaults to 1e-06):
                The epsilon used by the rms normalization layers.
            use_cache (`bool`, *optional*, defaults to `True`):
                Whether or not the model should return the last key/values attentions (not used by all models). Only
                relevant if `config.is_decoder=True`.
            pad_token_id (`int`, *optional*, defaults to 0):
                Padding token id.
            eos_token_id (`int`, *optional*, defaults to 1):
                End of stream token id.
            bos_token_id (`int`, *optional*, defaults to 2):
                Beginning of stream token id.
            tie_word_embeddings (`bool`, *optional*, defaults to `True`):
                Whether to tie weight embeddings
            rope_theta (`float`, *optional*, defaults to 10000.0):
                The base period of the RoPE embeddings.
            attention_bias (`bool`, defaults to `False`, *optional*, defaults to `False`):
                Whether to use a bias in the query, key, value and output projection layers during self-attention.
            attention_dropout (`float`, *optional*, defaults to 0.0):
                The dropout ratio for the attention probabilities.
            query_pre_attn_scalar (`float`, *optional*, defaults to 256): scaling factor used on the attention scores
            sliding_window (`int`, *optional*, defaults to 4096): in EncdecGemma2Stack, every other layer uses sliding window attention. This is the
                size of the sliding window.
            final_logit_softcapping (`float`, *optional*, defaults to 30.0): scaling factor when applying tanh softcapping on the logits.
            attn_logit_softcapping (`float`, *optional*, defaults to 50.0): scaling factor when applying tanh softcapping on the attention scores.
            cache_implementation (`str`, *optional*, defaults to `"hybrid"`): the cache type to be used with `generate`.

        ```python
        >>> from transformers import EncdecGemma2StackModel, EncdecGemma2StackConfig
        >>> # Initializing a EncdecGemma2Stack encdec_gemma2_stack-7b style configuration
        >>> configuration = EncdecGemma2StackConfig()
        >>> # Initializing a model from the encdec_gemma2_stack-7b style configuration
        >>> model = EncdecGemma2StackModel(configuration)
        >>> # Accessing the model configuration
        >>> configuration = model.config
        ```
    Stack config is exactly the same as Gemma2Config."""

    model_type = "encdec_gemma2_stack"
    keys_to_ignore_at_inference = ["past_key_values"]
    base_model_tp_plan = {
        "layers.*.self_attn.q_proj": "colwise",
        "layers.*.self_attn.k_proj": "colwise",
        "layers.*.self_attn.v_proj": "colwise",
        "layers.*.self_attn.o_proj": "rowwise",
        "layers.*.mlp.gate_proj": "colwise",
        "layers.*.mlp.up_proj": "colwise",
        "layers.*.mlp.down_proj": "rowwise",
    }
    base_model_pp_plan = {
        "embed_tokens": (["input_ids"], ["inputs_embeds"]),
        "layers": (["hidden_states", "attention_mask"], ["hidden_states"]),
        "norm": (["hidden_states"], ["hidden_states"]),
    }

    def __init__(
        self,
        vocab_size=256000,
        hidden_size=2304,
        intermediate_size=9216,
        num_hidden_layers=26,
        num_attention_heads=8,
        num_key_value_heads=4,
        head_dim=256,
        hidden_activation="gelu_pytorch_tanh",
        max_position_embeddings=8192,
        initializer_range=0.02,
        rms_norm_eps=1e-6,
        use_cache=True,
        pad_token_id=0,
        eos_token_id=1,
        bos_token_id=2,
        tie_word_embeddings=True,
        rope_theta=10000.0,
        attention_bias=False,
        attention_dropout=0.0,
        query_pre_attn_scalar=256,
        sliding_window=4096,
        final_logit_softcapping=30.0,
        attn_logit_softcapping=50.0,
        cache_implementation="hybrid",
        **kwargs,
    ):
        super().__init__(
            pad_token_id=pad_token_id,
            bos_token_id=bos_token_id,
            eos_token_id=eos_token_id,
            tie_word_embeddings=tie_word_embeddings,
            **kwargs,
        )
        self.vocab_size = vocab_size
        self.max_position_embeddings = max_position_embeddings
        self.hidden_size = hidden_size
        self.intermediate_size = intermediate_size
        self.num_hidden_layers = num_hidden_layers
        self.num_attention_heads = num_attention_heads
        self.head_dim = head_dim
        self.num_key_value_heads = num_key_value_heads
        self.initializer_range = initializer_range
        self.rms_norm_eps = rms_norm_eps
        self.use_cache = use_cache
        self.rope_theta = rope_theta
        self.attention_bias = attention_bias
        self.attention_dropout = attention_dropout
        self.hidden_activation = hidden_activation
        self.query_pre_attn_scalar = query_pre_attn_scalar
        self.sliding_window = sliding_window
        self.final_logit_softcapping = final_logit_softcapping
        self.attn_logit_softcapping = attn_logit_softcapping
        self.cache_implementation = cache_implementation


class EncdecGemma2Config(PretrainedConfig):
    r"""
    This is the configuration class to store the configuration of a [`EncdecGemma2Model`]. It is used to instantiate an EncdecGemma2
    model according to the specified arguments, defining the model architecture. Instantiating a configuration with the
    defaults will yield a similar configuration to a hypothetical balanced Gemma2 encoder-decoder model.
    For example, to create a balanced encoder-decoder model from two "google/gemma2-2b" configurations:
    ```python
    >>> from transformers import Gemma2Config, EncdecGemma2Config, EncdecGemma2Model
    >>> base_config = Gemma2Config.from_pretrained("google/gemma2-2b")
    >>> encdec_config = EncdecGemma2Config(encoder_config=base_config, decoder_config=base_config)
    >>> model = EncdecGemma2Model(encdec_config)
    ```
    Configuration objects inherit from [PretrainedConfig] and can be used to control the model outputs. Read the
    documentation from [PretrainedConfig] for more information.
    Args:
        encoder_config (`Union[EncdecGemma2StackConfig, dict]`, optional):
            Configuration for the encoder.
        decoder_config (`Union[EncdecGemma2StackConfig, dict]`, optional):
            Configuration for the decoder.
        is_encoder_decoder (bool, optional, defaults to True):
            Whether the model is used as an encoder/decoder or not.
        dropout_rate (`float`, *optional*, defaults to 0.0):
            The ratio for all dropout layers (following T5).
        classifier_dropout_rate (`float`, *optional*, defaults to 0.0):
            The dropout ratio for classifier (following T5).
        attention_dropout (`float`, *optional*, defaults to 0.0):
            The dropout ratio for attention.
        kwargs (additional keyword arguments, optional):
            Will be passed to the PretrainedConfig base class.
    """

    model_type = "encdecgemma2"
    keys_to_ignore_at_inference = ["past_key_values"]
    sub_configs = {
        "encoder": EncdecGemma2StackConfig,
        "decoder": EncdecGemma2StackConfig,
    }
    base_model_tp_plan = {
        # encoder
        "encoder.layers.*.self_attn.q_proj": "colwise",
        "encoder.layers.*.self_attn.k_proj": "colwise",
        "encoder.layers.*.self_attn.v_proj": "colwise",
        "encoder.layers.*.self_attn.o_proj": "rowwise",
        "encoder.layers.*.mlp.gate_proj": "colwise",
        "encoder.layers.*.mlp.up_proj": "colwise",
        "encoder.layers.*.mlp.down_proj": "rowwise",
        # decoder
        "decoder.layers.*.self_attn.q_proj": "colwise",
        "decoder.layers.*.self_attn.k_proj": "colwise",
        "decoder.layers.*.self_attn.v_proj": "colwise",
        "decoder.layers.*.self_attn.o_proj": "rowwise",
        "decoder.layers.*.cross_attn.q_proj": "colwise",
        "decoder.layers.*.cross_attn.k_proj": "colwise",
        "decoder.layers.*.cross_attn.v_proj": "colwise",
        "decoder.layers.*.cross_attn.o_proj": "rowwise",
        "decoder.layers.*.mlp.gate_proj": "colwise",
        "decoder.layers.*.mlp.up_proj": "colwise",
        "decoder.layers.*.mlp.down_proj": "rowwise",
    }
    base_model_pp_plan = {
        # encoder
        "encoder.embed_tokens": (["input_ids"], ["inputs_embeds"]),
        "encoder.layers": (["hidden_states", "attention_mask"], ["hidden_states"]),
        "encoder.norm": (["hidden_states"], ["hidden_states"]),
        # decoder
        "decoder.embed_tokens": (["input_ids"], ["inputs_embeds"]),
        "decoder.layers": (["hidden_states", "attention_mask"], ["hidden_states"]),
        "decoder.norm": (["hidden_states"], ["hidden_states"]),
    }

    def __init__(
        self,
        encoder_config: Optional[EncdecGemma2StackConfig] = None,
        decoder_config: Optional[EncdecGemma2StackConfig] = None,
        is_encoder_decoder: bool = True,
        dropout_rate: float = 0.0,
        classifier_dropout_rate: float = 0.0,
        attention_dropout: float = 0.0,
        tie_word_embeddings: bool = True,
        **kwargs,
    ):
        encoder = kwargs.pop("encoder", None)
        decoder = kwargs.pop("decoder", None)
        if encoder is not None and decoder is not None:
            # From pretrained models
            self.encoder = EncdecGemma2StackConfig(**encoder)
            self.decoder = EncdecGemma2StackConfig(**decoder)
        else:
            # From configuration directly
            if encoder_config is None:
                encoder_config = EncdecGemma2StackConfig()

            if decoder_config is None:
                decoder_config = encoder_config

            # Decouple encoder and decoder config in any case
            encoder_config = EncdecGemma2StackConfig(**encoder_config.to_dict())
            decoder_config = EncdecGemma2StackConfig(**decoder_config.to_dict())

            encoder_config.is_decoder = False
            encoder_config.use_cache = False
            encoder_config.dropout_rate = dropout_rate
            encoder_config.attention_dropout = attention_dropout
            encoder_config.classifier_dropout_rate = classifier_dropout_rate
            encoder_config.cross_attention_hidden_size = None
            encoder_config.cache_implementation = "static"
            self.encoder = encoder_config

            decoder_config.is_decoder = True
            decoder_config.use_cache = True
            decoder_config.dropout_rate = dropout_rate
            decoder_config.attention_dropout = attention_dropout
            decoder_config.classifier_dropout_rate = classifier_dropout_rate
            decoder_config.cross_attention_hidden_size = encoder_config.hidden_size
            decoder_config.cache_implementation = "static"
            self.decoder = decoder_config

        super().__init__(**kwargs)

        self.is_encoder_decoder = is_encoder_decoder
        self.use_cache = kwargs.get("use_cache", self.decoder.use_cache)
        self.initializer_range = kwargs.get("initializer_range", self.decoder.initializer_range)
        self.pad_token_id = kwargs.get("pad_token_id", self.decoder.pad_token_id)
        self.dropout_rate = dropout_rate
        self.classifier_dropout_rate = classifier_dropout_rate
        self.tie_word_embeddings = tie_word_embeddings


__all__ = ["EncdecGemma2Config"]
