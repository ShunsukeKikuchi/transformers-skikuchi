#                ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨
#           This file was automatically generated from src/transformers/models/state/modular_state.py.
#               Do NOT edit this file manually as any edits will be overwritten by the generation of
#             the file from the modular. If any change should be done, please apply the change to the
#                          modular_state.py file directly. One of our CI enforces this.
#                ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨ðŸš¨
# coding=utf-8
# Copyright 2025 The HuggingFace Inc. team. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from ...configuration_utils import PretrainedConfig


class StateEmbeddingConfig(PretrainedConfig):
    r"""
    This is the configuration class to store the configuration of a [`StateEmbeddingModel`]. It is used to instantiate a
    State Embedding model according to the specified arguments, defining the model architecture.

    Configuration objects inherit from [`PretrainedConfig`] and can be used to control the model outputs. Read the
    documentation from [`PretrainedConfig`] for more information.

    Args:
        token_dim (`int`, *optional*, defaults to 5120):
            Dimension of the input gene embeddings (from ESM-2).
        d_model (`int`, *optional*, defaults to 512):
            Dimension of the model's hidden representations.
        nhead (`int`, *optional*, defaults to 8):
            Number of attention heads for each attention layer in the Transformer encoder.
        d_hid (`int`, *optional*, defaults to 2048):
            Dimension of the feedforward network in the Transformer encoder.
        nlayers (`int`, *optional*, defaults to 6):
            Number of hidden layers in the Transformer encoder.
        output_dim (`int`, *optional*, defaults to 128):
            Dimension of the output gene representations.
        dropout (`float`, *optional*, defaults to 0.0):
            The dropout probability for all fully connected layers in the embeddings, encoder, and pooler.
        max_position_embeddings (`int`, *optional*, defaults to 2048):
            The maximum sequence length that this model might ever be used with (top L genes).
        use_cache (`bool`, *optional*, defaults to `True`):
            Whether or not the model should return the last key/values attentions.
        num_bins (`int`, *optional*, defaults to 10):
            Number of expression bins for soft binning in Expression-Aware Embeddings.
        z_dim_rd (`int`, *optional*, defaults to 0):
            Dimension of random effect embeddings.
        z_dim_ds (`int`, *optional*, defaults to 0):
            Dimension of dataset-specific embeddings.

    ```python
    >>> from transformers import StateEmbeddingModel, StateEmbeddingConfig

    >>> # Initializing a State Embedding style configuration
    >>> configuration = StateEmbeddingConfig()

    >>> # Initializing a model from the State Embedding style configuration
    >>> model = StateEmbeddingModel(configuration)

    >>> # Accessing the model configuration
    >>> configuration = model.config
    ```"""

    model_type = "state_embedding"
    keys_to_ignore_at_inference = ["past_key_values"]

    def __init__(
        self,
        token_dim=5120,
        d_model=2048,
        # nhead=8,
        nhead=16,
        d_hid=2048,
        nlayers=16,
        output_dim=2048,
        dropout=0.0,
        max_position_embeddings=2048,
        use_cache=True,
        num_bins=10,
        z_dim_rd=0,
        z_dim_ds=0,
        use_return_dict=True,
        **kwargs,
    ):
        super().__init__(
            use_cache=use_cache,
            # use_return_dict=use_return_dict,
            **kwargs,
        )
        self.token_dim = token_dim
        self.d_model = d_model
        self.nhead = nhead
        self.d_hid = d_hid
        self.nlayers = nlayers
        self.output_dim = output_dim
        self.dropout = dropout
        self.max_position_embeddings = max_position_embeddings
        self.num_bins = num_bins
        self.z_dim_rd = z_dim_rd
        self.z_dim_ds = z_dim_ds


__all__ = ["StateEmbeddingConfig"]
